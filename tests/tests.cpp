#ifndef TESTS
#define TESTS

#include <cstdint>
#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <string>
#include <vector>

using namespace std;

// bool compareVectors(const vector<uint8_t>& vec1, const vector<uint8_t>& vec2) {
//     if (vec1.size() != vec2.size()) {
//         return false;
//     }

//     return equal(vec1.begin(), vec1.end(), vec2.begin());
// }

// bool hashTest() {
//     static vector<uint8_t> message = {
//         0x32, 0x31, 0x30, 0x39, 0x38, 0x37, 0x36, 0x35,
//         0x34, 0x33, 0x32, 0x31, 0x30, 0x39, 0x38, 0x37,
//         0x36, 0x35, 0x34, 0x33, 0x32, 0x31, 0x30, 0x39,
//         0x38, 0x37, 0x36, 0x35, 0x34, 0x33, 0x32, 0x31,
//         0x30, 0x39, 0x38, 0x37, 0x36, 0x35, 0x34, 0x33,
//         0x32, 0x31, 0x30, 0x39, 0x38, 0x37, 0x36, 0x35,
//         0x34, 0x33, 0x32, 0x31, 0x30, 0x39, 0x38, 0x37,
//         0x36, 0x35, 0x34, 0x33, 0x32, 0x31, 0x30};

//     static vector<uint8_t> expected = {
//         0x00, 0x55, 0x7b, 0xe5, 0xe5, 0x84, 0xfd, 0x52,
//         0xa4, 0x49, 0xb1, 0x6b, 0x02, 0x51, 0xd0, 0x5d,
//         0x27, 0xf9, 0x4a, 0xb7, 0x6c, 0xba, 0xa6, 0xda,
//         0x89, 0x0b, 0x59, 0xd8, 0xef, 0x1e, 0x15, 0x9d};

//     return compareVectors(streebog(message), expected);
// };

// bool nmacTest(vector<uint8_t> message, vector<uint8_t> key) {
//     static vector<uint8_t> expected = {
//         0xb7, 0x69, 0x57, 0xe6, 0x31, 0xcc, 0x55, 0x13,
//         0xe0, 0xe4, 0xaf, 0x9d, 0x53, 0x88, 0x92, 0xfc,
//         0x0d, 0x46, 0x1b, 0x83, 0x01, 0xf6, 0x24, 0xc0,
//         0xdf, 0xb5, 0x51, 0x91, 0xe8, 0x77, 0x52, 0xfa};

//     return compareVectors(NMAC(message, key), expected);
// };

// bool hmacTest(vector<uint8_t> message, vector<uint8_t> key) {
//     static vector<uint8_t> expected = {
//         0x4b, 0xef, 0x0f, 0xd2, 0xd2, 0xf7, 0x45, 0x87,
//         0x66, 0xa3, 0x77, 0x8d, 0x8f, 0xaa, 0xfa, 0x94,
//         0x06, 0x25, 0x6d, 0x0f, 0x69, 0xe8, 0x06, 0xa5,
//         0x28, 0x9a, 0x0b, 0x4c, 0x93, 0x56, 0x10, 0x22,
//         0x63, 0x0e, 0xc8, 0xf9, 0xb1, 0xce, 0xcd, 0x31,
//         0x69, 0xcf, 0xf7, 0x92, 0xcd, 0x6a, 0xef, 0x6f,
//         0x46, 0x8b, 0xe8, 0x6c, 0x94, 0x7d, 0xae, 0x47,
//         0xcd, 0x13, 0x1e, 0xf4, 0x0b, 0x26, 0xf7, 0x77};

//     return compareVectors(HMAC(message, key), expected);
// };

// bool test() {
//     size_t total = 3;
//     size_t passed = 0;

//     static vector<uint8_t> message(64, 0x01);
//     static vector<uint8_t> key = {
//         0x32, 0x31, 0x30, 0x39, 0x38, 0x37, 0x36, 0x35,
//         0x34, 0x33, 0x32, 0x31, 0x30, 0x39, 0x38, 0x37,
//         0x36, 0x35, 0x34, 0x33, 0x32, 0x31, 0x30, 0x39,
//         0x38, 0x37, 0x36, 0x35, 0x34, 0x33, 0x32, 0x31,
//         0x30, 0x39, 0x38, 0x37, 0x36, 0x35, 0x34, 0x33,
//         0x32, 0x31, 0x30, 0x39, 0x38, 0x37, 0x36, 0x35,
//         0x34, 0x33, 0x32, 0x31, 0x30, 0x39, 0x38, 0x37,
//         0x36, 0x35, 0x34, 0x33, 0x32, 0x31, 0x30, 0xFF};

//     passed += hashTest();
//     passed += nmacTest(message, key);
//     passed += hmacTest(message, key);

//     return total == passed;
// }

#endif